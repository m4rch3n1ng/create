let serveConfig = [
	"function serve() {",
	"\tlet server",
	"",
	"\tfunction toExit() {",
	"\t\tif (server) server.kill(0)",
	"\t}",
	"",
	"\treturn {",
	"\t\twriteBundle() {",
	"\t\t\tif (server) return",
	"\t\t\tserver = require(\"child_process\").spawn(\"npm\", [\"run\", \"start\", \"--\", \"--dev\"], {",
	"\t\t\t\tstdio: [\"ignore\", \"inherit\", \"inherit\"],",
	"\t\t\t\tshell: true",
	"\t\t\t})",
	"",
	"\t\t\tprocess.on(\"SIGTERM\", toExit)",
	"\t\t\tprocess.on(\"exit\", toExit)",
	"\t\t}",
	"\t}",
	"}",
	""
]

module.exports = {
	config: ( sirv, typescript ) => [
		"import svelte from \"rollup-plugin-svelte\"",
		"import commonjs from \"@rollup/plugin-commonjs\"",
		"import resolve from \"@rollup/plugin-node-resolve\"",
		"import livereload from \"rollup-plugin-livereload\"",
		"import { terser } from \"rollup-plugin-terser\"",
		"import css from \"rollup-plugin-css-only\"",
		typescript ? "import sveltePreprocess from  \"svelte-preprocess\"" : null,
		typescript ? "import typescript from  \"@rollup/plugin-typescript\"" : null,
		"",
		"const production = !process.env.ROLLUP_WATCH",
		"",
		sirv ? serveConfig : null,
		"export default {",
		!typescript ? "\tinput: \"src/main.js\"," : "\tinput: \"src/main.ts\",",
		"\toutput: {",
		"\t\tsourcemap: true,",
		"\t\tformat: \"iife\",",
		"\t\tname: \"app\",",
		"\t\tfile: \"dist/build/svelte.js\"",
		"\t},",
		"\tplugins: [",
		"\t\tsvelte({",
		typescript ? "\t\t\tpreprocess: sveltePreprocess({ sourceMap: !production })," : null,
		"\t\t\tcompilerOptions: {",
		"\t\t\t\tdev: !production",
		"\t\t\t}",
		"\t\t}),",
		"",
		"\t\tcss({ output: \"svelte.css\" }),",
		"",
		"\t\tresolve({",
		"\t\t\tbrowser: true,",
		"\t\t\tdedupe: [\"svelte\"]",
		"\t\t}),",
		"\t\tcommonjs(),",
		typescript ? [
			"\t\ttypescript({",
			"\t\t\tsourceMap: !production,",
			"\t\t\tinlineSources: !production",
			"\t\t}),"
		] : null,
		"",
		sirv ? "\t\t!production && serve()," : null,
		"\t\t!production && livereload(\"dist\"),",
		"",
		"\t\tproduction && terser()",
		"\t],",
		"\twatch: {",
		"\t\tclearScreen: false",
		"\t}",
		"}",
		""
	].filter(( line ) => line != null).flat().join("\n"),
	html: [
		"<!DOCTYPE html>",
		"<html lang=\"en\">",
		"<head>",
		"\t<meta charset=\"utf-8\">",
		"\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">",
		"",
		"\t<title>svelte app</title>",
		"",
		"\t<link rel=\"stylesheet\" href=\"/build/svelte.css\">",
		"\t<script src=\"/build/svelte.js\" defer></script>",
		"</head>",
		"<body>",
		"</body>",
		"</html>",
		"",
	].join("\n"),
	tsconfig: [
		"{",
		"\t\"compilerOptions\": {",
		"",
		"\t\t/* - project options - */",
		"\t\t\"isolatedModules\": true,",
		"\t\t\"removeComments\": true,",
		"\t\t\"sourceMap\": true,",
		"\t\t\"target\": \"es2017\",",
		"",
		"\t\t/* - strict checks - */",
		"\t\t\"alwaysStrict\": true,",
		"\t\t\"noImplicitAny\": true,",
		"\t\t\"noImplicitThis\": true,",
		"\t\t\"strict\": true,",
		"\t\t\"strictBindCallApply\": true,",
		"\t\t\"strictFunctionTypes\": true,",
		"\t\t\"strictNullChecks\": true,",
		"\t\t\"strictPropertyInitialization\": true,",
		"\t\t",
		"\t\t/* - linter checks - */",
		"\t\t\"noImplicitReturns\": true,",
		"\t\t\"noFallthroughCasesInSwitch\": true,",
		"\t\t\"noUncheckedIndexedAccess\": true,",
		"\t\t\"noUnusedLocals\": true,",
		"\t\t\"noUnusedParameters\": true,",
		"",
		"\t\t/* - module resolution - */",
		"\t\t\"esModuleInterop\": true,",
		"\t\t\"moduleResolution\": \"node\",",
		"\t\t\"types\": [\"svelte\"],",
		"",
		"\t\t/* - experimental - */",
		"\t\t\"emitDecoratorMetadata\": true,",
		"\t\t\"experimentalDecorators\": true,",
		"",
		"\t\t/* - advanced - */",
		"\t\t\"forceConsistentCasingInFileNames\": true,",
		"\t\t\"importsNotUsedAsValues\": \"error\",",
		"\t\t\"skipLibCheck\": true,",
		"\t},",
		"\t\"include\": [\"src/**/*\"],",
		"\t\"exclude\": [\"node_modules/*\", \"__sapper__/*\", \"public/*\"]",
		"}",
	].join("\n")
}
