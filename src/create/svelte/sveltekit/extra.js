export const mongodb = {
	js: [
		"import { MongoClient, ObjectId } from \"mongodb\"",
		"",
		"let client = null",
		"let db = null",
		"",
		"export async function init () {",
		"\tif (!client) {",
		"\t\tclient = await MongoClient.connect(\"mongodb://localhost:27017/\", { useNewUrlParser: true, useUnifiedTopology: true })",
		"\t\tdb = client.db(\"name\")",
		"\t}",
		"",
		"\treturn { db, client }",
		"}",
		"",
		"export { ObjectId }",
		""
	].join("\n"),
	ts: [
		"import { MongoClient, ObjectId } from \"mongodb\"",
		"import type { MongoClient as MClient, Db } from \"mongodb\"",
		"",
		"let client: MClient | null = null",
		"let db: Db | null = null",
		"",
		"export async function init () {",
		"\tif (!client) {",
		"\t\tclient = await MongoClient.connect(\"mongodb://localhost:27017/\", { useNewUrlParser: true, useUnifiedTopology: true })",
		"\t\tdb = client.db(\"name\")",
		"\t}",
		"",
		"\treturn { db, client }",
		"}",
		"",
		"export { ObjectId }",
		""
	].join("\n")
}

export const mysql = {
	js: [
		"import { createConnection } from \"mysql\"",
		"",
		"const options = {",
		"\thost: \"host\",",
		"\tuser: \"user\",",
		"\tpassword: \"password\",",
		"\tdatabase: \"database\"",
		"}",
		"",
		"let db = null",
		"",
		"export async function init () {",
		"\tif (!db) {",
		"\t\tdb = createConnection(options)",
		"\t\tawait new Promise(( resolve, reject ) => db.connect((( err ) => err ? reject(err) : resolve())))",
		"\t}",
		"",
		"\treturn { db }",
		"}",
		"",
		"export function query ( db, query ) {",
		"\treturn new Promise(( resolve ) => {",
		"\t\tdb.query(query, ( error, data ) => error ? resolve(null) : resolve(data))",
		"\t})",
		"}",
		""
	].join("\n"),
	ts: [
		"import { createConnection } from \"mysql\"",
		"import type { Connection } from \"mysql\"",
		"",
		"const options = {",
		"\thost: \"host\",",
		"\tuser: \"user\",",
		"\tpassword: \"password\",",
		"\tdatabase: \"database\"",
		"}",
		"",
		"let db: Connection | null = null",
		"",
		"export async function init () {",
		"\tif (!db) {",
		"\t\tdb = createConnection(options)",
		"\t\tawait new Promise(( resolve, reject ) => (db as Connection).connect((( err ) => err ? reject(err) : resolve(null))))",
		"\t}",
		"",
		"\treturn { db }",
		"}",
		"",
		"export function query ( db: Connection, query: string ) {",
		"\treturn new Promise(( resolve ) => {",
		"\t\tdb.query(query, ( error, data ) => error ? resolve(null) : resolve(data))",
		"\t})",
		"}",
		""
	].join("\n")
}
